%% HCV fitness profile: downstream analysis of pre-processed Illumina sequencing data
%updated: July 2017, Lei Dai

%analysis in this script: 
%-data pre-processing
%-filtering: missing mutants; lethal mutants
%-calculate RF; average over mutations with the same aa substition; calculate selection coefficient
%-identify synonymous mutations; identify 1,2,3-nt mutations

%Inputs
%NS5A_FD: read this file into Matlab as table. raw data re-processed in April 2017
%Outputs
%save workspace: see last section

%% import data: summary of mutant read counts
clear
clc
%input file: NS5A_FD, folder: count_5mismatch (generated by count.py)
%5 mismatches allowed in mapping
NS5AFD=readtable('./data/count_5mismatch/NS5A_FD','delimiter','\t');
%save as .mat
% save('./data/NS5AFD_5mismatch','NS5AFD')

%% reference info
%WT aa sequence, aa alphabet
load('./data/HCV_NS5A_reference.mat') 
drug={'0pM','10pM','40pM','100pM'};

%% Calculate mutant frequency 
%frequency of mutants in the pool, nomralized by depth (i.e.total number of reads)
mut_input=NS5AFD.Input./NS5AFD.Input_Dep;
mut_tran=NS5AFD.Transfection./NS5AFD.Transfection_Dep;
mut_sel{1}=NS5AFD.BMS_0./NS5AFD.BMS_0_Dep; %selection at Daclatasvir=0pM
mut_sel{2}=NS5AFD.BMS_10./NS5AFD.BMS_10_Dep; %10pM
mut_sel{3}=NS5AFD.BMS_40./NS5AFD.BMS_40_Dep; %40pM
mut_sel{4}=NS5AFD.BMS_100./NS5AFD.BMS_100_Dep; %100pM

%frequncy of WT in the pool
wt_input=NS5AFD.Input_WT./NS5AFD.Input_Dep;
wt_tran=NS5AFD.Transfection_WT./NS5AFD.Transfection_Dep;
wt_sel{1}=NS5AFD.BMS_0_WT./NS5AFD.BMS_0_Dep;
wt_sel{2}=NS5AFD.BMS_10_WT./NS5AFD.BMS_10_Dep;
wt_sel{3}=NS5AFD.BMS_40_WT./NS5AFD.BMS_40_Dep;
wt_sel{4}=NS5AFD.BMS_100_WT./NS5AFD.BMS_100_Dep;

%% histogram of mutant frequency
%mark cutoff=0.0005
cutoff_freq=0.0005; 
subplot(1,2,1);
histogram(log10(mut_input));
hold on;
line([log10(cutoff_freq) log10(cutoff_freq)],[0 300],'color','r');

subplot(1,2,2);
histogram(log10(mut_tran));
hold on;
line([log10(cutoff_freq) log10(cutoff_freq)],[0 400],'color','r');
% set(gca,'xlim',[-6.5 -1]);

%% selection pool
for i=1:4
subplot(2,2,i);
histogram(log10(mut_sel{i}));
hold on;
line([log10(cutoff_freq) log10(cutoff_freq)],[0 400],'color','r');
end

%% Calculate relative fitness to WT
%relative fitness to WT: DCV=0,10,40,100pM
rf_tran=[];
%mutants with input count=0 in plasmid ->NaN in rf_tran
index_missing_plasmid=find(mut_input==0);

%fitness: transfection/plasmid
rf_tran=(mut_tran./mut_input)./(wt_tran./wt_input); %transfection pool/input pool
% find(isnan(rf_tran))

%fitness: selection/transfection
rf_sel=[];
for i=1:4 %4 conditions
    rf_sel(:,i)=(mut_sel{i}./mut_tran)./(wt_sel{i}./wt_tran); %selection pool/transfection pool
end

%% criterion of filtering
%plasmid/transfection/selection pools: mutant frequency relative to WT<cutoff_relfreq
%set cutoff_freq=0.0005. the same as Qi et al, PLOS Pathogens 2014
cutoff_freq=0.0005; 

%classify filtered mutants
%1) missing mutants
index_missing=find(mut_input<cutoff_freq);
index_observed=find(mut_input>=cutoff_freq);

%2) lethal mutants, set fitness to 0
%-transfection pool mutant freq<cutoff_freq 
%-transfection pool mutant freq>cutoff_freq, selection pool mutant freq<cutoff_freq 
index_filter_tran=find(mut_tran<cutoff_freq);
index_lethal_tran=intersect(index_observed,index_filter_tran);

%apply filtering
rf_filter=[];
rf_filter=rf_sel;
rf_filter(index_missing,:)=NaN; %set RF of missing mutants to NaN
rf_filter(index_lethal_tran,:)=0; %set RF of lethal mutants to 0 (no drug condition); RF of lethal mutants under drug selection is meaningless

%for convenience
rf_0=rf_filter(:,1);
rf_10=rf_filter(:,2);
rf_40=rf_filter(:,3);
rf_100=rf_filter(:,4);

%% group mutants with the same amino acid substitution
%output: rf_aa
%group into aa mutants: average RF over multiple nt variants 
redundancy_aa=zeros(length(WTsequence),length(AAalphabet)); %record how many nt mutants mapping to a particular aa substitution
for k=1:4
     rf_aa{k}=ones(length(WTsequence),length(AAalphabet))*NaN; %initialize, set RF to NaN
     std_aa{k}=zeros(length(WTsequence),length(AAalphabet)); %RF std of multiple nt mutants for the same aa mutation
end
     
for i=1:length(WTsequence)
    for j=1:length(AAalphabet)
        WT_aa=WTsequence{i};
        position=num2str(i+17); %starting from NS5A aa 18
        mut_aa=AAalphabet{j};
        if WT_aa~=mut_aa %mutant
            mutation{i,j}=strcat(WT_aa,position,mut_aa);
            ind_mut=find(strcmp(NS5AFD.AAChange,mutation{i,j})); %find all nt mutants corresponding to the same aa substitution
            %exclude missing variants
            ind_mut=intersect(ind_mut,index_observed);
            if ~isempty(ind_mut)
                %rf_aa_tran(i,j)=mean(rf_tran(ind_mut));
                redundancy_aa(i,j)=length(ind_mut);
                for k=1:4
                    rf_aa{k}(i,j)=mean(rf_filter(ind_mut,k));
                    std_aa{k}(i,j)=std(rf_filter(ind_mut,k));
                end
            end
        else %WT, RF set to 1
            mutation{i,j}='WT';
%             rf_aa_tran(i,j)=1;
            for k=1:4
                rf_aa{k}(i,j)=1;
            end
        end
    end
end

%% alternative method: group mutants with the same amino acid substitution
%output:rf_aa2
%sum frequency of nt mutants mapping to the same aa substitution (before and after selection) 
%and then calculate fitness (taking the ratio of frequency)
%normalization by WT fitness is the same as method 1
%pros: sum read counts before taking the ratio, possibly reduce measure error of RF 
%cons: does not assign RF for individual nt mutants

for k=1:4
     rf_aa2{k}=ones(length(WTsequence),length(AAalphabet))*NaN; %initialize, set RF to NaN
end

for i=1:length(WTsequence)
    for j=1:length(AAalphabet)
        WT_aa=WTsequence{i};
        position=num2str(i+17); %starting from NS5A aa 18
        mut_aa=AAalphabet{j};
        if WT_aa~=mut_aa %mutant
            mutation{i,j}=strcat(WT_aa,position,mut_aa);
            ind_mut=find(strcmp(NS5AFD.AAChange,mutation{i,j})); %find all nt mutants corresponding to the same aa substitution
            %exclude missing variants
            ind_mut=intersect(ind_mut,index_observed);
            if ~isempty(ind_mut)
                redundancy_aa(i,j)=length(ind_mut);
                for k=1:4
                    freq_mut_tran=sum(mut_tran(ind_mut));
                    if freq_mut_tran<cutoff_freq
                        freq_mut_tran=0; %set to lethal
                    end
                    freq_mut_sel=sum(mut_sel{k}(ind_mut));
                    freq_wt_tran=wt_tran(ind_mut(1)); %wt normalization is the same for all nt mutants (in the same sub-library)
                    freq_wt_sel=wt_sel{k}(ind_mut(1));
                    rf_aa2{k}(i,j)=(freq_mut_sel/freq_mut_tran)/(freq_wt_sel/freq_wt_tran);
                end
            end
        else %WT, RF set to 1
            mutation{i,j}='WT';
            for k=1:4
                rf_aa2{k}(i,j)=1;
            end
        end
    end
end

%% compare two different methods of grouping nt mutants
redundancy_vec=reshape(redundancy_aa,[1,numel(redundancy_aa)]);
index_temp=find(redundancy_vec>1);
rf_aa_plot=reshape(rf_aa{1},[1,numel(rf_aa{1})]);
rf_aa2_plot=reshape(rf_aa2{1},[1,numel(rf_aa2{1})]);

plot(rf_aa_plot(index_temp),rf_aa2_plot(index_temp),'+');

%% check statistics: fraction of missing aa mutants; fraction of lethal mutants
num_aamut=length(WTsequence)*19;

%count # of missing aa mutants in the data set. should correspond to NaN entries in rf_aa
num_missing=nnz(isnan(rf_aa{1})) %same for all conditions, k=1 to 4
fraction_missing=num_missing/num_aamut
%count # of lethal mutants
num_lethal=nnz(find(rf_aa{1}==0))
fraction_lethal=num_lethal/num_aamut

%% identify nonsense mutations
%stop codon: "_"
index_C = strfind(NS5AFD.AAChange, '_');
index_nonsense = find(not(cellfun('isempty', index_C)));
%alternative: in one line
% index_nonsense=find(~(cellfun(@isempty,strfind(NS5AFD.AAChange,'_'))));
length(index_nonsense)
% NS5AFD.AAChange(ind_nonsense)
rf_nonsense=rf_filter(index_nonsense,1);
fraction_lethal_nonsense=nnz(rf_nonsense==0)/length(rf_nonsense)
% hist_custom(rf_nonsense(rf_nonsense>0),0,'k',1);

%% identify synonymous/silent mutation
%more analysis: analysis_synonymous.m
index_silent=find(NS5AFD.Synonymous == 1);
length(index_silent)
rf_silent=rf_filter(index_silent,1);
fraction_lethal_silent=nnz(rf_silent==0)/length(rf_silent)
% hist_custom(rf_silent(rf_silent>0),0,'k',1);

%% identify 1,2,3-nt mutation
%more analaysis: analysis_geneticcode.m
for i=1:3
%include nonsense and silent mutations
index_nt{i}=find(NS5AFD.DNAdist==i);
length(index_nt{i})
%exclude nonsense and silent mutations. non-synonymous mutation only
index_nt_nonsyn{i}=setdiff(setdiff(find(NS5AFD.DNAdist==i),index_silent),index_nonsense);
length(index_nt_nonsyn{i})
end

%more analysis of codons->analysis_geneticcode.m

%% check statistics: # of observed missense(non-synonymous), silent (synonymous) and nonsense mutations
%non-synonymous mutations (note: missense mutation is a subclass of non-synonymous mutations. refer to point mutations only)
clc
num_nonsyn=0;
for i=1:3
    num_nonsyn=num_nonsyn+length(index_nt_nonsyn{i});
end
num_nonsyn
%silent mutations
num_silent=length(index_silent)
%nonsense mutation
num_nonsense=length(index_nonsense)
%total
num_nonsyn+num_silent+num_nonsense

%% save data
%RF values of all nt mutants: rf_filter
%RF values of all aa mutants: rf_aa
%index_missing/index_observed; index_lethal
%index_nonsense; index_silent; index_nt{1,2,3}

%save all variables in workspace
%version 5, July 2017
outputfile='./data/downstream_5mismatch_v5.mat';
save(outputfile);
